package com.yinghai.macao.backstage.controller;

import com.yinghai.macao.common.constant.Constant;
import com.yinghai.macao.common.constant.ExcelException;
import com.yinghai.macao.common.dao.SpcarMapper;
import com.yinghai.macao.common.model.OrderDirection;
import com.yinghai.macao.common.model.Parameter;
import com.yinghai.macao.common.model.SpcarDriver;
import com.yinghai.macao.common.model.SpcarOrder;
import com.yinghai.macao.common.model.SpcarPassenger;
import com.yinghai.macao.common.service.*;
import com.yinghai.macao.common.util.*;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import net.sf.json.JsonConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.apache.log4j.Logger;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;

/**
 * Created by Administrator on 2017/5/15.
 */
@Controller
@RequestMapping("admin/order")
public class BackSpcarOrderController {
    private Logger log = Logger.getLogger(this.getClass());
    @Resource
    private SpcarOrderService spcarOrderService;
    @Resource
    private SpcarDriverService spcarDriverService;
    @Resource
    private SpcarService spcarService;
    
    @Resource
    private SpcarPassengerService spcarpassengerService;
    @Autowired
    private ParameterService parameterService;
    @Autowired
    private OrderDirectionService orderDirectionService;
    /**
     * 订单列表
     * @param request
     * @param model
     * @return
     */
    @RequestMapping("list")
    public String list(HttpServletRequest request, ModelMap model){
        try {
            request.setCharacterEncoding("utf-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        Integer pageNo = TransformUtils.toInt(request.getParameter("page"));
        pageNo = pageNo==0?1:pageNo;
        SpcarOrder spcarOrder = new SpcarOrder();
        String status = request.getParameter("status");
        if(status!=null&&status!=""){
            model.put("status",status);
            //spcarOrder.setStatus(TransformUtils.toInt(status));
            spcarOrder.setStatusArray(status.split(";"));
        }
        String spcarOrderId = request.getParameter("spcarOrderId");
        if(spcarOrderId!=null&&spcarOrderId!=""){
            model.put("spcarOrderId",spcarOrderId);
            spcarOrder.setSpcarOrderId(TransformUtils.toInt(spcarOrderId));
        }
        String payWayCode = request.getParameter("payWayCode");
        if(payWayCode!=null&&payWayCode!=""){
            model.put("payWayCode",payWayCode);
            spcarOrder.setPayWayCode(TransformUtils.toInt(payWayCode));
        }
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Object createTimeS = request.getParameter("createTimeS");

        if(createTimeS!=null&&createTimeS!=""){
            try {
                String createStr = TransformUtils.toString(createTimeS);
                createStr = createStr+" 00:00:00";
                Date create = simpleDateFormat.parse(createStr);
                spcarOrder.setCreateTimeS(create);
            } catch (ParseException e) {
                log.error("BackSpcarOrderController/list======createTimeS日期格式有誤======");
                e.printStackTrace();
                return "500";
            }
            model.put("createTimeS",createTimeS);
        }
        Object createTimeE = request.getParameter("createTimeE");
        if(createTimeE!=null&&createTimeE!=""){
            try {
                String createStr = TransformUtils.toString(createTimeE);
                createStr = createStr+" 23:59:59";
                Date create = simpleDateFormat.parse(createStr);
                spcarOrder.setCreateTimeE(create);
            } catch (ParseException e) {
                log.error("BackSpcarOrderController/list======createTimeE日期格式有誤======");
                e.printStackTrace();
                return "500";
            }
            model.put("createTimeE",createTimeE);
        }
        SpcarPassenger spcarPassenger = new SpcarPassenger();
        String countryCode = request.getParameter("countryCode");
        if(StringUtil.notEmpty(countryCode)){
        	 model.put("countryCode",countryCode);
        	 spcarPassenger.setCountryCode(countryCode);
        }
        String tel = request.getParameter("tel");
        if(StringUtil.notEmpty(tel)){
        	 model.put("tel",tel);
        	 spcarPassenger.setTel(tel);
        }
       if(StringUtil.notEmpty(tel)||StringUtil.notEmpty(countryCode)){
    	   spcarOrder.setSpcarPassenger(spcarPassenger);
       }
       SpcarDriver spcarDriver = new SpcarDriver();
       String drivercountryCode = request.getParameter("drivercountryCode");
       if(StringUtil.notEmpty(drivercountryCode)){
       	 model.put("drivercountryCode",drivercountryCode);
       	spcarDriver.setCountryCode(drivercountryCode);
       }
       String drivertel = request.getParameter("drivertel");
       if(StringUtil.notEmpty(drivertel)){
       	 model.put("drivertel",drivertel);
       	spcarDriver.setTel(drivertel);
       }
      if(StringUtil.notEmpty(drivertel)||StringUtil.notEmpty(drivercountryCode)){
   	   spcarOrder.setSpcarDriver(spcarDriver);
      }
      
        Page<SpcarOrder> page = spcarOrderService.findList(pageNo,15,spcarOrder);
        model.addAttribute("page", page);
        model.addAttribute("pageNo", page.getPageNum());
        model.addAttribute("pageSize", page.getPageSize());
        model.addAttribute("recordCount", page.getTotal());
        model.addAttribute("pageCount", page.getPages());
        return "order/list";
    }
    @RequestMapping("edit")
    public String edit(HttpServletRequest request, ModelMap model){
    	try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	String orderId = request.getParameter("orderId");
        Page<SpcarOrder> page = spcarOrderService.findList(1,15,new SpcarOrder());
        model.addAttribute("page", page);
        model.addAttribute("pageNo", page.getPageNum());
        model.addAttribute("orderId", orderId);
        model.addAttribute("pageSize", page.getPageSize());
        model.addAttribute("recordCount", page.getTotal());
        model.addAttribute("pageCount", page.getPages());
        return "order/edit";
    }
    @RequestMapping("show")
    public String show(HttpServletRequest request, ModelMap model){
    	try {
			request.setCharacterEncoding("utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        Page<SpcarOrder> page = spcarOrderService.findList(1,15,new SpcarOrder());
        model.addAttribute("page", page);
        model.addAttribute("pageNo", page.getPageNum());
        model.addAttribute("pageSize", page.getPageSize());
        model.addAttribute("recordCount", page.getTotal());
        model.addAttribute("pageCount", page.getPages());
        return "order/show";
    }

    /**
     * 选择专车页面跳转
     * @param request
     * @param model
     * @return
     */
    @RequestMapping("chooseSpcar")
    public  String chooseSpcar(HttpServletRequest request, ModelMap model){
        Object id = request.getParameter("id");
        if(id==null||id==""){
            log.error("chooseSpcar======id為空======");
            return "500";
        }
        SpcarOrder spcarOrder = spcarOrderService.findOneBykey(TransformUtils.toInt(id));
        List spcarList = spcarDriverService.findAllList();
        List carList = spcarService.findNoUsedList();
        model.put("spcarOrder",spcarOrder);
        model.put("spcarList",spcarList);
        model.put("carList",carList);
        return "order/chooseSpcar";
    }

    /**
     * 确定选择专车
     * @param request
     * @param response
     */
    @RequestMapping("chooseSpcarSure")
    public void chooseSpcarSure(HttpServletRequest request, HttpServletResponse response){
        String spcarDriverId = request.getParameter("spcarDriverId");
        String orderId = request.getParameter("orderId");
        String carId = request.getParameter("carId");
        JSONObject responseObject = new JSONObject();

        if(StringUtil.empty(spcarDriverId)){
            log.error("BackSpcarOrderController/chooseSpcarSure======spcarDriverId为空======");
            responseObject.put("msg", "spcarDriverId不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        if(StringUtil.empty(orderId)){
            log.error("BackSpcarOrderController/chooseSpcarSure======orderId为空======");
            responseObject.put("msg", "orderId不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        if(StringUtil.empty(carId)){
            log.error("BackSpcarOrderController/chooseSpcarSure======carId为空======");
            responseObject.put("msg", "carId不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        int i = spcarOrderService.chooseSpcar(orderId,spcarDriverId,carId);
        ResponseUtils.backRenderJson(response,i);
    }

    /**
     * 司機前方接載
     * @param request
     * @param response
     */
    @RequestMapping("driverSetOut")
    public void driverSetOut(HttpServletRequest request, HttpServletResponse response){
        String orderId = request.getParameter("orderId");
        JSONObject responseObject = new JSONObject();
        if(StringUtil.empty(orderId)){
            log.error("BackSpcarOrderController/driverSetOut======orderId为空======");
            responseObject.put("msg", "orderId不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        int i = spcarOrderService.driverSetOut(orderId);
        ResponseUtils.backRenderJson(response,i);
    }

    /**
     * 司機確定到達
     * @param request
     * @param response
     */
    @RequestMapping("comfirmArrive")
    public void comfirmArrive(HttpServletRequest request, HttpServletResponse response){
        String orderId = request.getParameter("orderId");
        JSONObject responseObject = new JSONObject();
        if(StringUtil.empty(orderId)){
            log.error("BackSpcarOrderController/comfirmArrive======orderId为空======");
            responseObject.put("msg", "orderId不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        int i = spcarOrderService.comfirmArrive(orderId);
        ResponseUtils.backRenderJson(response,i);
    }

    /**
     * 确定接到乘客
     * @param request
     * @param response
     */
    @RequestMapping("comfirmCarry")
    public void comfirmCarry(HttpServletRequest request, HttpServletResponse response){
        String orderId = request.getParameter("orderId");
        JSONObject responseObject = new JSONObject();
        if(StringUtil.empty(orderId)){
            log.error("BackSpcarOrderController/comfirmCarry======orderId为空======");
            responseObject.put("msg", "orderId不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        int i = spcarOrderService.comfirmCarry(orderId);
        ResponseUtils.backRenderJson(response,i);
    }
    /**
     * 订单完成操作
     * @param request
     * @param response
     */
    @RequestMapping("orderFinished")
    public void orderFinished(HttpServletRequest request, HttpServletResponse response){
        System.out.println(request.getQueryString());
        String orderId = request.getParameter("orderId");
        JSONObject responseObject = new JSONObject();
        if(StringUtil.empty(orderId)){
            log.error("BackSpcarOrderController/orderFinished======orderId为空======");
            responseObject.put("msg", "orderId不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        int i = spcarOrderService.orderFinished(orderId,null,null,null);
        ResponseUtils.backRenderJson(response,i);
    }

    /**
     * 退款操作
     * @param request
     * @param response
     */
    @RequestMapping("refund")
    public void refund(HttpServletRequest request, HttpServletResponse response){
        String pwd = request.getParameter("pwd");
        JSONObject responseObject = new JSONObject();
        if(StringUtil.empty(pwd)){
            log.error("BackSpcarOrderController/refund======密码为空======");
            responseObject.put("msg", "密码为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        String orderId = request.getParameter("orderId");
        if(StringUtil.empty(orderId)){
            log.error("BackSpcarOrderController/refund======orderId为空======");
            responseObject.put("msg", "orderId不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        String ratio = request.getParameter("ratio");
        if(StringUtil.empty(ratio)){
            log.error("BackSpcarOrderController/refund======ratio為空======");
            responseObject.put("msg", "ratio不能为空！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        //验证密码
        if("888888".equals(pwd)){
        	//判斷該訂單是否為已取消
        	SpcarOrder spcarOrder = spcarOrderService.findOneBykey(Integer.parseInt(orderId));
        	if(spcarOrder==null){
        		 log.error("BackSpcarOrderController/refund======該訂單為空======");
                 responseObject.put("msg", "找不到相應的訂單！");
                 responseObject.put("code", "-1");
                 responseObject.put("data", new JSONObject());
                 ResponseUtils.renderJson(response, responseObject.toString());
                 return;
        	}
        	if(spcarOrder.getStatus()==SpcarOrder.ORDER_CANCAL_STATUS){
        		 log.error("BackSpcarOrderController/refund======該訂單已取消，請勿重新操作======");
                 responseObject.put("msg", "該訂單已取消，請勿重新操作！");
                 responseObject.put("code", "-1");
                 responseObject.put("data", new JSONObject());
                 ResponseUtils.renderJson(response, responseObject.toString());
                 return;
        	}
            //退款
            String result = spcarOrderService.reback(orderId,new BigDecimal(ratio));
            JSONObject object = JSONObject.fromObject(result);
            if("1".equals(object.getString("code"))){
                responseObject.put("msg", "success");
                responseObject.put("code", "1");
                responseObject.put("data", new JSONObject());
                ResponseUtils.renderJson(response, responseObject.toString());
                return;
            }else if("0".equals(object.getString("code"))){
                responseObject.put("msg", "退款成功！通知乘客失敗！");
                responseObject.put("code", "-1");
                responseObject.put("data", new JSONObject());
                ResponseUtils.renderJson(response, responseObject.toString());
                return;
            }else{
                responseObject.put("msg", "系统异常");
                responseObject.put("code", "-1");
                responseObject.put("data", new JSONObject());
                ResponseUtils.renderJson(response, responseObject.toString());
                return;
            }
        }else{
            responseObject.put("msg", "密碼錯誤！");
            responseObject.put("code", "-1");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
    }

    /**
     * 退款页面
     * @param request
     * @param model
     * @return
     */
    @RequestMapping("rebackPage")
    public String rebackPage(HttpServletRequest request, ModelMap model){
        JSONObject responseObject = new JSONObject();
        String orderId = request.getParameter("orderId");
        if(StringUtil.empty(orderId)){
            log.error("BackSpcarOrderController/rebackPage======orderId为空======");
            return "500";
        }
        SpcarOrder spcarOrder = spcarOrderService.findOneBykey(Integer.parseInt(orderId));
        if(SpcarOrder.ORDER_CANCAL_STATUS==spcarOrder.getStatus().intValue()||spcarOrder.getStatus().intValue()==SpcarOrder.ORDER_NOPAY_STATUS||spcarOrder.getStatus().intValue()==SpcarOrder.ORDER_FINISH_STATUS){
            return list(request,model);
        }
        model.addAttribute("spcarOrder",spcarOrder);
        return "order/reback";
    }
    
    
    @RequestMapping("save")
    public void save(HttpServletRequest request, ModelMap model,HttpServletResponse response) throws ParseException{
    	 JSONObject responseObject = new JSONObject();
    	 SimpleDateFormat sdf  =   new  SimpleDateFormat( "yyyy-MM-dd'T'HH:mm" ); 
    		SpcarOrder spcarOrder = new SpcarOrder();
    		String countryCode = "";
    		 String tel = "";
    	 String orderId = request.getParameter("orderId");
    	 if(StringUtil.empty(orderId)){//orderId为空时，这张订单为原订单
    		 countryCode = request.getParameter("countryCode");
       	  	 tel = request.getParameter("tel");
       	  String startTime = request.getParameter("startTime") ;
      	if(StringUtil.notEmpty(startTime)){
      		spcarOrder.setStartTime(sdf.parse(startTime));
      	}
      	String startX = request.getParameter("startX") ;
      	if(StringUtil.notEmpty(startX)){
      		spcarOrder.setStartX(TransformUtils.toDouble(startX));
      	}
      	String startY = request.getParameter("startY") ;
      	if(StringUtil.notEmpty(startY)){
      		spcarOrder.setStartY(TransformUtils.toDouble(startY));
      	}
      	String startAddress = request.getParameter("startAddress") ;
      	if(StringUtil.notEmpty(startAddress)){
      		spcarOrder.setStartAddress(startAddress); 
      	}
    	 }else{
    		 SpcarOrder oldOrder = spcarOrderService.findOneBykey(TransformUtils.toInt(orderId));
    		 if(oldOrder==null){
        		 responseObject.put("msg", "原訂單不存在！");
                 responseObject.put("code", "102");
                 responseObject.put("data", new JSONObject());
                 ResponseUtils.renderJson(response, responseObject.toString());
                 return;
        	 }
    		 if(oldOrder.getOrderId()!=null&&oldOrder.getOrderId()!=0){
    			 responseObject.put("msg", "原訂單不能也為續單！");
                 responseObject.put("code", "103");
                 responseObject.put("data", new JSONObject());
                 ResponseUtils.renderJson(response, responseObject.toString());
                 return;
    		 }
    		 if(oldOrder.getStatus()==SpcarOrder.ORDER_NOPAY_STATUS||oldOrder.getStatus()==SpcarOrder.ORDER_FINISH_STATUS){
    			 responseObject.put("msg", "原訂單已經完成或者未支付！");
                 responseObject.put("code", "104");
                 responseObject.put("data", new JSONObject());
                 ResponseUtils.renderJson(response, responseObject.toString());
                 return;
    		 }
    		 //判断该原订单是否还有未支付的订单
    		 SpcarOrder queryspcarOrder = new SpcarOrder();
    		 String[] statusArray = {"999"};
    		 queryspcarOrder.setStatusArray(statusArray);
    		 queryspcarOrder.setOrderId(TransformUtils.toInt(orderId));
    		 List list = spcarOrderService.findList(queryspcarOrder);
    		 if(list!=null&&list.size()>0){
    			 responseObject.put("msg", "該原訂單存在未支付的續單！");
                 responseObject.put("code", "104");
                 responseObject.put("data", new JSONObject());
                 ResponseUtils.renderJson(response, responseObject.toString());
                 return; 
    		 }
    		 spcarOrder.setOrderId(TransformUtils.toInt(orderId));
    		 spcarOrder.setPassengerId(oldOrder.getPassengerId());
    		 spcarOrder.setDriverId(oldOrder.getDriverId());
    		 spcarOrder.setSpcarId(oldOrder.getSpcarId());
    		 spcarOrder.setStartX(oldOrder.getStartX());
    		 spcarOrder.setStartY(oldOrder.getStartY());
    		 spcarOrder.setStartAddress(oldOrder.getStartAddress());
    		 //原订单的起始时间加上时长就是续单的起始时间
    		 Calendar calendar = Calendar.getInstance();
    		 calendar.setTime(oldOrder.getStartTime());
    		 calendar.add(Calendar.HOUR,oldOrder.getTotalHour());//对小时数进行加法操作
    		 spcarOrder.setStartTime(calendar.getTime());
    		 //如果是续单时，从原订单中获取乘客的手机
    		 countryCode = oldOrder.getSpcarPassenger().getCountryCode();
    		 tel = oldOrder.getSpcarPassenger().getTel();
    	 }
    	 //查询是否有该乘客
    	SpcarPassenger spcarPassenger =  spcarpassengerService.findByTel(countryCode, tel);
    	if(spcarPassenger==null){
    		 responseObject.put("msg", "該乘客不存在！");
             responseObject.put("code", "110");
             responseObject.put("data", new JSONObject());
             ResponseUtils.renderJson(response, responseObject.toString());
             return;
    	}
    
    	Integer totalHour = TransformUtils.toInt(request.getParameter("totalHour")) ;
      	if(totalHour==null||totalHour==0){
   		 responseObject.put("msg", "请输入时长！");
            responseObject.put("code", "105");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
   	}
    	spcarOrder.setPassengerId(spcarPassenger.getSpcarId());	
    	spcarOrder.setTotalHour(totalHour);
    	spcarOrder.setStatus(SpcarOrder.ORDER_NOPAY_STATUS);
    	spcarOrder.setMemo("");
    	
    	
    	   sdf = new SimpleDateFormat("yyyyMMddHHmmss");
          String out_trade_no = sdf.format(new Date()).toString();
          spcarOrder.setOrderNo(out_trade_no);
    	spcarOrder.setCreateTime(new Date());
    	String amount = request.getParameter("amount") ;
    	if(StringUtil.empty(amount)){//当价钱不是手写时，取单价表中的数据
    	  int total_fee = 0;
          Parameter parameter = parameterService.findByHour(totalHour);
          if(parameter==null){//如果单价表中无这报价，则按照默认规则给单价
          	 if (totalHour > 0 && totalHour < 4) {
                   total_fee = 300 * totalHour* 100;
               } else if (totalHour >= 4 && totalHour < 8) {
                   total_fee = 250 * totalHour* 100;
               } else if (totalHour >= 8) {
                   total_fee = 200 * totalHour* 100;
               }
          }else{
          	if(parameter.getCoefficient()!=0){
          		total_fee = (int) (parameter.getPrice()*parameter.getCoefficient());
          	}else{
          		total_fee = (int) (parameter.getPrice());
          	}
          	
          }
          spcarOrder.setAmount(total_fee);
    	}else{
    		spcarOrder.setAmount(TransformUtils.toInt(amount)*100);
    	}           	
        	String booleanCash = request.getParameter("booleanCash");
        	if(StringUtil.notEmpty(booleanCash)&&"1".equals(booleanCash)){//1代表现金交易，1代表APP线上支付
        		spcarOrder.setPayWayCode(SpcarOrder.PAY_WAY_CASH);
        		spcarOrder.setStatus(SpcarOrder.ORDER_PAIRING_STATUS);
        		spcarOrder.setPayStatus(SpcarOrder.PAY_ALEADY_STATUS);
        		spcarOrder.setPayTime(new Date());
        		if(StringUtil.notEmpty(orderId)){
        			spcarOrder.setStatus(SpcarOrder.ORDER_RENEW_STATUS);
        		}
        	}
        spcarOrder.setUpdateTime(new Date());
    	int i =spcarOrderService.addSpcarOrderAndPush(spcarOrder, spcarPassenger.getImName(), spcarPassenger.getSign());
    	if(i<1){
    		 responseObject.put("msg", "新增订单失败！");
             responseObject.put("code", "999");
             responseObject.put("data", new JSONObject());
             ResponseUtils.renderJson(response, responseObject.toString());
             return;
    	}else{
    		 responseObject.put("msg", "新增订单成功！");
             responseObject.put("code", "1");
             responseObject.put("data", new JSONObject());
             ResponseUtils.renderJson(response, responseObject.toString());
             return;
    	}
    }
	/**
	 * 導出Excel
	 * @throws ExcelException 
	 * @throws UnsupportedEncodingException 
	 */
    @RequestMapping("doExcel")
    public void doExcel(HttpServletRequest request, ModelMap model,HttpServletResponse response) throws ParseException, ExcelException, UnsupportedEncodingException{
    	LinkedHashMap<String,String> fieldMap = new LinkedHashMap<>();
    	fieldMap.put("spcarOrderId", "訂單編號");
    	
    	fieldMap.put("spcarPassenger.name", "乘客姓名");
    	fieldMap.put("spcarPassenger.countryCode", "乘客區號");
    	fieldMap.put("spcarPassenger.tel", "乘客手機");
    	fieldMap.put("spcarPassenger.sex", "乘客性別");
    	fieldMap.put("status", "訂單狀態");
    	fieldMap.put("orderId", "原單編號");
    	fieldMap.put("amount", "訂單價格（元）");
    	fieldMap.put("totalHour", "約車時長（小時）");
    	fieldMap.put("payWayCode", "支付方式");
    	fieldMap.put("memo", "備註");
    	fieldMap.put("spcarDriver.name", "司機姓名");
    	fieldMap.put("spcarDriver.countryCode", "司機區號");
    	fieldMap.put("spcarDriver.tel", "司機手機");
    	fieldMap.put("spcar.spcarType", "車型");
    	fieldMap.put("spcar.spcarColor", "車色");
    	fieldMap.put("spcar.spcarNo", "車牌號");
    	fieldMap.put("createTime", "創建時間");
    	fieldMap.put("payTime", "支付時間");
    	fieldMap.put("cancelTime", "取消訂單時間");
    	fieldMap.put("completeTime", "完成訂單時間");
         SpcarOrder spcarOrder = new SpcarOrder();
         String status = request.getParameter("status");
         if(status!=null&&status!=""){
             model.put("status",status);
             //spcarOrder.setStatus(TransformUtils.toInt(status));
             spcarOrder.setStatusArray(status.split(";"));
         }
         String spcarOrderId = request.getParameter("spcarOrderId");
         if(spcarOrderId!=null&&spcarOrderId!=""){
             model.put("spcarOrderId",spcarOrderId);
             spcarOrder.setSpcarOrderId(TransformUtils.toInt(spcarOrderId));
         }
         String payWayCode = request.getParameter("payWayCode");
         if(payWayCode!=null&&payWayCode!=""){
             model.put("payWayCode",payWayCode);
             spcarOrder.setPayWayCode(TransformUtils.toInt(payWayCode));
         }
         SpcarPassenger spcarPassenger = new SpcarPassenger();
         String countryCode = request.getParameter("countryCode");
         if(StringUtil.notEmpty(countryCode)){
         	 model.put("countryCode",countryCode);
         	 spcarPassenger.setCountryCode(countryCode);
         }
         String tel = request.getParameter("tel");
         if(StringUtil.notEmpty(tel)){
         	 model.put("tel",tel);
         	 spcarPassenger.setTel(tel);
         }
        if(StringUtil.notEmpty(tel)||StringUtil.notEmpty(countryCode)){
     	   spcarOrder.setSpcarPassenger(spcarPassenger);
        }
        SpcarDriver spcarDriver = new SpcarDriver();
        String drivercountryCode = request.getParameter("drivercountryCode");
        if(StringUtil.notEmpty(drivercountryCode)){
        	 model.put("drivercountryCode",drivercountryCode);
        	spcarDriver.setCountryCode(drivercountryCode);
        }
        String drivertel = request.getParameter("drivertel");
        if(StringUtil.notEmpty(drivertel)){
        	 model.put("drivertel",drivertel);
        	spcarDriver.setTel(drivertel);
        }
       if(StringUtil.notEmpty(drivertel)||StringUtil.notEmpty(drivercountryCode)){
    	   spcarOrder.setSpcarDriver(spcarDriver);
       }
         SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
         Object createTimeS = request.getParameter("createTimeS");

         if(createTimeS!=null&&createTimeS!=""){
             try {
                 String createStr = TransformUtils.toString(createTimeS);
                 createStr = createStr+" 00:00:00";
                 Date create = simpleDateFormat.parse(createStr);
                 spcarOrder.setCreateTimeS(create);
             } catch (ParseException e) {
                 log.error("BackSpcarOrderController/list======createTimeS日期格式有誤======");
                 e.printStackTrace();
             }
             model.put("createTimeS",createTimeS);
         }
         Object createTimeE = request.getParameter("createTimeE");
         if(createTimeE!=null&&createTimeE!=""){
             try {
                 String createStr = TransformUtils.toString(createTimeE);
                 createStr = createStr+" 23:59:59";
                 Date create = simpleDateFormat.parse(createStr);
                 spcarOrder.setCreateTimeE(create);
             } catch (ParseException e) {
                 log.error("BackSpcarOrderController/list======createTimeE日期格式有誤======");
                 e.printStackTrace();
             }
             model.put("createTimeE",createTimeE);
         }
         List<SpcarOrder> list = spcarOrderService.findList(spcarOrder);
         ExcelUtil.listToExcel(list, fieldMap, "訂單列表", response);
    }
    //顯示訂單途徑地圖
    @RequestMapping("showOrderDirection")
    public  void showOrderDirection(HttpServletRequest request, ModelMap model, HttpServletResponse response){
    	 String orderId = request.getParameter("id");
    	   OrderDirection orderDirection = new OrderDirection();
           orderDirection.setOrderId(TransformUtils.toInt(orderId));
           List<OrderDirection> list = orderDirectionService.findList(orderDirection);
           SpcarOrder spcarOrder = spcarOrderService.findOneBykey(Integer.parseInt(orderId));
    	JSONObject responseObject = new JSONObject();
    	String msg = "";//弹窗页面显示的内容
    	msg = msg+spcarOrder.getStartAddress()+"（起點）";
    	if(list!=null&&list.size()!=0){
    		for(int i=0;i<list.size();i++){
    			 orderDirection = list.get(i);
    			 msg = msg+"->"+orderDirection.getDescript()+"（途徑）";
    		}
    	}
    	if(spcarOrder.getStatus()==SpcarOrder.ORDER_FINISH_STATUS){//如果该订单是完成订单，就把下车地点也取出来
    		 msg = msg+"->"+spcarOrder.getEndAddress()+"（終點）";
    	}
    	 responseObject.put("code", "1");
         responseObject.put("msg", msg);
         responseObject.put("orderId", orderId);
         responseObject.put("data", new JSONObject());
         ResponseUtils.renderJson(response, responseObject.toString());
         return;
    }
    //查询途径数据
    @RequestMapping(value = "/directionList", method = RequestMethod.POST)
    public void directionList(HttpServletRequest request, HttpServletResponse response){

        String orderId = request.getParameter("orderId");
        if (StringUtil.empty(orderId)) {
        	JSONObject responseObject = new JSONObject();
            responseObject.put("code", "101");
            responseObject.put("msg", "订单号不能为空");
            responseObject.put("data", new JSONObject());
            ResponseUtils.renderJson(response, responseObject.toString());
            return;
        }
        OrderDirection orderDirection = new OrderDirection();
        orderDirection.setOrderId(TransformUtils.toInt(orderId));
        List<OrderDirection> list = orderDirectionService.findList(orderDirection);
        SpcarOrder spcarOrder = spcarOrderService.findOneBykey(Integer.parseInt(orderId));
        JsonConfig config = new JsonConfig();
        config.registerJsonValueProcessor(Date.class, new JsonDateValueProcessor("yyyy-MM-dd HH:mm:ss"));
        JSONArray array = JSONArray.fromObject(list,config);
        JSONObject order = JSONObject.fromObject(spcarOrder,config);
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("list",array);
        jsonObject.put("order",order);
        JSONObject responseObject = new JSONObject();
        responseObject.put("code","1");
        responseObject.put("msg","success");
        responseObject.put("data",jsonObject);
        ResponseUtils.renderJson(response,responseObject.toString());
    }
   
}
